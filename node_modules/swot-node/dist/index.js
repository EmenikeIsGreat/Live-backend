"use strict";
/**
 * Copyright (c) 2021 Marvin Schopf
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @copyright 2021 Marvin Schopf
 * @license Apache-2.0
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchoolNames = exports.getSchoolName = exports.isAcademic = void 0;
const tldjs_1 = require("tldjs");
const fs_1 = require("fs");
const academic_tld_1 = __importDefault(require("academic-tld"));
const blacklist_1 = __importDefault(require("./blacklist"));
const path = __importStar(require("path"));
const os_1 = require("os");
// Remove public suffixes from the domain
function domainWithoutSuffix(domain, publicSuffix) {
    if (domain == null || domain.length === 0) {
        return publicSuffix;
    }
    return domain.replace("." + publicSuffix, "");
}
async function isAcademic(url) {
    const schoolName = await getSchoolName(url);
    if (schoolName === false) {
        return false;
    }
    else {
        return true;
    }
}
exports.isAcademic = isAcademic;
async function getSchoolName(url) {
    const schoolNames = await getSchoolNames(url);
    if (typeof schoolNames === "boolean") {
        return schoolNames;
    }
    else {
        return schoolNames[0];
    }
}
exports.getSchoolName = getSchoolName;
async function getSchoolNames(url) {
    const parsedUrl = tldjs_1.parse(url);
    if (parsedUrl.publicSuffix === null) {
        return false;
    }
    if (blacklist_1.default.indexOf(parsedUrl.domain) > -1) {
        return false;
    }
    let temporaryAnswer = false;
    // Check if the TLD is an academic TLD
    if (academic_tld_1.default.indexOf(parsedUrl.publicSuffix) > -1) {
        temporaryAnswer = true;
    }
    if (parsedUrl.publicSuffix.split(".").length > 1) {
        // If the suffix consists of multiple domains, split them into an array and reverse it
        const suffixes = parsedUrl.publicSuffix.split(".").reverse();
        try {
            return (await fs_1.promises.readFile(path.resolve(__dirname, "..", "data", "lib", "domains", ...suffixes, domainWithoutSuffix(parsedUrl.domain, parsedUrl.publicSuffix) +
                ".txt")))
                .toString()
                .split(os_1.EOL)
                .filter(Boolean);
        }
        catch (e) {
            return temporaryAnswer ? true : false;
        }
    }
    else {
        try {
            return (await fs_1.promises.readFile(path.resolve(__dirname, "..", "data", "lib", "domains", parsedUrl.publicSuffix, domainWithoutSuffix(parsedUrl.domain, parsedUrl.publicSuffix) +
                ".txt")))
                .toString("utf-8")
                .split(os_1.EOL)
                .filter(Boolean);
        }
        catch (e) {
            return temporaryAnswer ? true : false;
        }
    }
}
exports.getSchoolNames = getSchoolNames;
